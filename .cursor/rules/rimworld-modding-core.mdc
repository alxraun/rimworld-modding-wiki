---
description: "Core" module Rimworld modding documentation
globs: 
alwaysApply: false
---
Project Path: \\?\C:\Projects\rimworld\wiki_workspace\wiki\core

Source Tree:

```
core
├── about-xml-guide.md
├── application-startup-sequence.md
├── mod-folder-structure.md
└── modding-fundamentals.md

```

`\\?\C:\Projects\rimworld\wiki_workspace\wiki\core\about-xml-guide.md`:

```````md
```markdown
## About.xml Cheat Sheet

**Purpose:**
- Identifies mod to RimWorld.
- Defines mod names (internal & viewer-facing).
- Provides mod description for in-game mod manager.
- Specifies mod dependencies and load order.

**Location:**
- `Mods/YourModFolder/About/About.xml`
- Folder and filename are case-sensitive.

**Root Tag:**
- `<ModMetaData>`

**Required Tags:**

- `<packageId>YourName.ModName</packageId>`
    - Internal mod identifier.
    - Alphanumeric, period-separated (e.g., `Author.Mod`).
    - **Globally unique** across all mods.
    - Case-insensitive.
    - Used for dependencies, load order, MayRequire.

- `<name>My Mod Name</name>`
    - Mod title (viewer-facing).
    - Not globally unique, but avoid changing.
    - Used by `PatchOperationFindMod`.

- `<author>Author Name</author>` / `<authors><li>Author Name</li></authors>`
    - Mod author(s).
    - Comma-separated names or list nodes.

- `<description>Mod description.</description>`
    - Plain-text mod description.
    - Shown in mod managers and Steam Workshop.
    - Keep relatively short for `About.xml`.

- `<supportedVersions><li>1.4</li></supportedVersions>`
    - RimWorld versions mod supports.
    - List tested versions.
    - Warnings for unsupported versions, but mod can still load.

**Optional Tags:**

- `<modVersion>1.0</modVersion>` / `<modVersion IgnoreIfNoMatchingField="True">1.0</modVersion>`
    - Mod version string for personal tracking.
    - Introduced in RimWorld 1.4.
    - `IgnoreIfNoMatchingField="True"` for older versions compatibility.

- `<modIconPath>Path/To/Icon</modIconPath>` / `<modIconPath IgnoreIfNoMatchingField="True">Path/To/Icon</modIconPath>`
    - Mod icon path (loading screens).
    - 32x32 PNG, limited colors.
    - RimWorld 1.5+ auto-loads `About/ModIcon.png`.
    - `IgnoreIfNoMatchingField="True"` for older versions compatibility.

- `<url>https://mod-url</url>`
    - Web link for mod info (Steam Workshop, GitHub, etc.).

- `<descriptionsByVersion><v1.4>...</v1.4></descriptionsByVersion>`
    - Version-specific descriptions (not for Steam Workshop).

- `<modDependencies><li>...</li></modDependencies>`
    - Mod dependencies.
    - Warns players if dependencies missing.
    - Not automatically used by Steam Workshop "Required Items".
    - `packageId`, `displayName`, `steamWorkshopUrl` in `<li>`.

- `<modDependenciesByVersion><v1.4><li>...</li></v1.4></modDependenciesByVersion>`
    - Version-specific dependencies.

- `<loadBefore><li>packageId</li></loadBefore>`
    - Mods to load before this mod.
    - Warns player if load order incorrect.
    - Use `packageId`s.

- `<loadBeforeByVersion><v1.4><li>packageId</li></v1.4></loadBeforeByVersion>`
    - Version-specific `loadBefore`.

- `<forceLoadBefore><li>packageId</li></forceLoadBefore>`
    - Forces load order; RimWorld prevents loading after specified mods.
    - External mod managers may ignore.

- `<loadAfter><li>packageId</li></loadAfter>`
    - Mods to load after this mod.
    - Warns player if load order incorrect.
    - Use `packageId`s.

- `<loadAfterByVersion><v1.4><li>packageId</li></v1.4></loadAfterByVersion>`
    - Version-specific `loadAfter`.

- `<forceLoadAfter><li>packageId</li></forceLoadAfter>`
    - Forces load order; RimWorld prevents loading before specified mods.
    - External mod managers may ignore.

- `<incompatibleWith><li>packageId</li></incompatibleWith>`
    - Incompatible mods.
    - Warns player if incompatible mods loaded together.
    - For fundamental incompatibilities, not just bugs.

- `<incompatibleWithByVersion><v1.4><li>packageId</li></v1.4></incompatibleWithByVersion>`
    - Version-specific `incompatibleWith`.
```

```````

`\\?\C:\Projects\rimworld\wiki_workspace\wiki\core\application-startup-sequence.md`:

```````md
```markdown
## RimWorld Application Startup Sequence - Cheat Sheet

**Root Method:** `Verse.PlayDataLoader.LoadAllPlayData(bool)` (called by `Verse.Root.Start()`)

**Load Order Steps:**

1. **Load mod config data:** Active mod list (`Verse.ModsConfig constructor`).
2. **Build mod list:** From mod folders (`Verse.ModLister.RebuildModList()`).
3. **Initialize mods:** Basic mod setup (`Verse.LoadedModManager.InitializeMods()`).
4. **Load mod assemblies:** DLLs, Mod subclass instances, queues asset loading (`Verse.LoadedModManager.LoadModContent()`, `Verse.LoadedModManager.CreateModClasses()`).
5. **Load Def XML files:** Parse XML (`Verse.LoadedModManager.LoadModXML()`).
6. **Combine Def XML:** Single unified XML document (`Verse.LoadedModManager.CombineIntoUnifiedXML()`).
7. **Load translation keys (Defs):** Rarely used (`Verse.TKeySystem.Parse()`).
8. **Load & error check patches:** Patch validation (`Verse.LoadedModManager.ErrorCheckPatches()`).
9. **Apply XML Patches:** `PatchOperations` (`Verse.LoadedModManager.ApplyPatches()`).
10. **Register Def inheritance:** `Name`, `ParentName` (`Verse.XmlInheritance.TryRegister()`).
11. **Apply Def inheritance:** Inheritance processing (`Verse.LoadedModManager.ParseAndProcessXML()`).
12. **Load Defs into Def classes:** XML -> C# Defs, register cross-refs (`Verse.LoadedModManager.ParseAndProcessXML()`).
13. **Warn on patch failures:** Patch error reporting (`Verse.LoadedModManager.ClearCachedPatches()`).
14. **Load Language metadata:** Language data initialization (`Verse.LanguageDatabase.InitAllMetadata()`).
15. **Store Defs in `DefDatabase`:** Global Def storage (`Verse.GenGeneric.InvokeStaticMethodOnGenericType() -> AddAllInMods`).
16. **Store Defs in `DefOf` classes:** Static Def access (`RimWorld.DefOfHelper.RebindAllDefOfs(true)`).
17. **Build translation key mappings:** Translation system setup (`Verse.TKeySystem.BuildMappings()`).
18. **Inject DefInjected translations (round 1):** Pre-implied Defs (`Verse.LanguageDatabase.activeLanguage.InjectIntoData_BeforeImpliedDefs()`).
19. **Generate implied defs (pre-resolve):** Blueprints, Meat, etc. (`Verse.DefGenerator.GenerateImpliedDefs_PreResolve();`).
20. **Resolve cross-references:** Def lookups (`Verse.DirectXmlCrossRefLoader.ResolveAllWantedCrossReferences()`).
21. **Store Defs in `DefOf` fields (round 2):** DefOf population, error on missing Defs (`RimWorld.DefOfHelper.RebindAllDefOfs(false)`).
22. **Reload player knowledge database:** Learning Helper setup (`RimWorld.PlayerKnowledgeDatabase.ReloadAndRebind()`, `RimWorld.LessonAutoActivator.Reset()`).
23. **Reset static data (load):** Initial data reset (`Verse.LoadedModManager.DoPlayLoad()`).
24. **Resolve references:** Def `ResolveReferences` calls (ThingCategoryDefs, RecipeDefs, Defs, ThingDefs) (`Verse.DefDatabase<...>.ResolveAllReferences(...)`, `Verse.GenGeneric.InvokeStaticMethodOnGenericType() -> ResolveAllReferences`).
25. **Generate implied defs (post-resolve):** Key bindings (`RimWorld.DefGenerator.GenerateImpliedDefs_PostResolve()`).
26. **Reset static data (smoothing):** Smoothing setup (`Verse.LoadedModManager.DoPlayLoad()`).
27. **Log config errors (Dev mode):** Def validation logging (`Verse.GenGeneric.InvokeStaticMethodOnGenericType() -> ErrorCheckAllDefs`).
28. **Load KeyBindings:** Key prefs initialization (`Verse.KeyPrefs.Init()`).
29. **Assign short hashes:** Hash assignment for Defs (`Verse.ShortHashGiver.GiveAllShortHashes()`).
30. **Load audio files:** Mod sound loading (`Verse.LoadedModManager.LoadModContent() -> Verse.ModContentPack.ReloadContent() -> VerseModContentPack.ReloadContentInt()`).
31. **Load textures:** Mod texture loading (`Verse.LoadedModManager.LoadModContent() -> Verse.ModContentPack.ReloadContent() -> VerseModContentPack.ReloadContentInt()`).
32. **Load strings:** Mod string loading (`Verse.LoadedModManager.LoadModContent() -> Verse.ModContentPack.ReloadContent() -> VerseModContentPack.ReloadContentInt()`).
33. **Load asset bundles:** Mod asset bundle loading (`Verse.LoadedModManager.LoadModContent() -> Verse.ModContentPack.ReloadContent() -> VerseModContentPack.ReloadContentInt()`).
34. **Load PawnBios:** Backer pawns, name lists (`RimWorld.SolidBioDatabase.LoadAllBios()`).
35. **Inject DefInjected translations (round 2):** Post-implied Defs, translation validation (`Verse.LanguageDatabase.activeLanguage.InjectIntoData_AfterImpliedDefs()`).
36. **Call `StaticConstructorOnStartup`:** Static constructors execution (`Verse.StaticConstructorOnStartupUtility.CallAll()`).
37. **Bake static atlases:** Texture atlas baking (`Verse.GlobalTextureAtlasManager.BakeStaticAtlases()`).
38. **Force garbage collection:** Memory cleanup (`RimWorld.IO.AbstractFilesystem.ClearAllCache()`, `System.GC.Collect(...)`).

**Warning:** Do not Harmony patch these methods for custom loading. Use appropriate methods instead. Consult #mod-development on RimWorld Discord for load issue questions.
```

```````

`\\?\C:\Projects\rimworld\wiki_workspace\wiki\core\mod-folder-structure.md`:

```````md
```markdown
## Mod Folder Structure - Cheat Sheet

**RimWorld Install Directory Root:**

- **Data/:** Core game XML Defs (mostly).
    - `Core/`: Contains base game XML defs.
- **Mods/:**  Mod subfolders are located here.
- **RimWorld*_Data/:** Game data, DLLs, assets.
    - `Managed/`:  Game code DLLs (Assembly-CSharp.dll, UnityEngine.CoreModule.dll).
    - `output_log.txt`: Detailed game debug log.
- **Source/:** Limited C# source code examples (RimWorld, Verse).

**Mods Folder Location (by OS):**
- Windows: `C:\Program Files (x86)\Steam\steamapps\common\RimWorld\Mods`
- Mac: `~/Library/Application Support/Steam/steamapps/common/RimWorld/RimWorldMac.app/Mods`
- Linux (standalone): `~/.steam/steam/steamapps/common/RimWorld/Mods`
- Linux (GoG): `/home/<user>/GOG/Games/RimWorld/game/Mods/`

**Mod Folder Structure (within Mods/):**

- **About/:** Required - Mod identification.
    - `About.xml`: Required - Mod metadata (name, author, id, versions, description).
    - `Preview.png`: Recommended - Mod preview image (640x360 PNG recommended, <1MB).
    - `ModIcon.png`: Optional - Loading screen icon (32x32 or 64x64 PNG).
- **Assemblies/:** Optional - Custom C# DLLs.
- **Defs/:** Optional - XML Def files for content.
    - Subfolders for organization (e.g., `ThingDefs`, `RecipeDefs`).
- **Languages/:** Optional - Localization files.
    - Language-specific subfolders (e.g., `English`, `French`).
    - Subfolders within language: `DefInjected`, `Keyed`, `Strings`.
- **Patches/:** Optional - XML PatchOperation files for modifying Defs.
- **Sounds/:** Optional - Custom sound files (Ogg, MP3, WAV recommended).
- **Textures/:** Optional - Custom texture files (PNG, JPG, PSD, DDS).

**Versioned Folders (Optional):**
- `1.1`, `1.2`, `1.3`, `1.4`, `Common`
- For version-specific content.
- RimWorld loads first compatible versioned folder + `Common` + root.
- v1.0: Does not recognize `Common`; `1.0` folder disables root folder loading.
- Most specific path wins in case of file conflicts.

**LoadFolders.xml (Optional):**
- Custom folder loading rules.
- Overrides default versioned folder loading (except v1.0).
- Example:
    ```xml
    <loadFolders>
      <v1.4>
        <li>/</li>
        <li>1.4</li>
        <li IfModActive="AnotherMod.PackageId">OptionalFolder</li>
      </v1.4>
    </loadFolders>
    ```
- Use `IfModActive`/`IfModNotActive` for conditional loading.
- `_steam` suffix for Steam Workshop version compatibility in `IfModActive`.

**Key Folders for C# Modding:**
- **Data/Core:** Vanilla game Defs for reference.
- **RimWorld*_Data/Managed:** Game DLLs for C# modding references.
- **Mods/YourModName/Assemblies:** For custom C# code.

**Important Notes:**
- Folder & filenames are case-sensitive.
- `About` folder with `About.xml` is mandatory for mod recognition.
- Use namespace folders or prefixes in `Sounds` & `Textures` to avoid collisions.
- `LoadFolders.xml` for advanced version and dependency management.
- `packageId` from `About.xml` is used for mod identification in `LoadFolders.xml`.
- `Preview.png` max size 1MB for Steam Workshop.
- `Core` & DLC folders: Similar to mod folders.
- `Source` folder: For sharing source code; GitHub recommended.
```

```````

`\\?\C:\Projects\rimworld\wiki_workspace\wiki\core\modding-fundamentals.md`:

```````md
## Modding Fundamentals - Cheat Sheet

**What are Mods?**
- Player-made modifications.
- Alter game functionality: add, change, remove content.
- Items, textures, sounds, mechanics, etc.
- Enhance or change gameplay.

**Types of Mods:**
- **Cosmetic:** Visual changes only (textures, styles). No gameplay impact.
    - Examples: Hairstyles, clothing, color variations.
- **User Interface (UI):** Quality of life improvements. Simplify game interaction.
    - Examples: Expanded inventory, medical lists, planning overlays.
- **Game Changes:** Alter core gameplay, add complexity, new mechanics.
    - Examples: New items, weapons, animals, mechanics, overhauls.
    - May affect game balance.

**Acquiring Mods:**
- **Steam Workshop:** (Steam version) - Easy download, auto-updates.
- **Ludeon Forums:** Manual download.
- **Third-party websites (GitHub, Nexus Mods etc):** Manual download, use with caution.

**Installing Mods:**
- **Steam Workshop:** "Subscribe" - Steam handles installation & updates.
- **Manual Installation:**
    1. Download mod files (ZIP).
    2. Extract to `RimWorld/Mods/` directory.
        - Windows: `C:\Program Files (x86)\Steam\steamapps\common\RimWorld\Mods`
        - Mac: `~/Library/Application Support/Steam/steamapps/common/RimWorld/RimWorldMac.app/Mods`
        - Linux (standalone): `~/.steam/steam/steamapps/common/RimWorld/Mods`
        - Linux (GoG): `/home/<user>/GOG/Games/RimWorld/game/Mods/`
    3. Activate in-game: Main Menu -> Mods.
    4. Restart RimWorld.

**Selecting Mods:**
- Player choice: Based on preferences and play style.
- No "right" way to select mods.
- Mod Compatibility: Large mod collections may have conflicts.
- Mod Types: Cosmetic, UI, Game Changes (balance varies).

**Modding Goals & Approaches:**

- **Add a new Thing:**
    - XML `ThingDef` entry.
    - Start by duplicating & modifying existing `ThingDef` from Core XML.
    - For similar Things: Use abstract `ThingDef` as `ParentName` for inheritance.
    - For buildings/plants: Ensure `category` tag is correctly set.

- **Create New Functionality:**
    - C# code for new behaviors.
    - Apply C# to Things via XML.
    - New Functionality Only: C# class.
    - Thing with New Functionality:
        - C# class inheriting `Thing`.
        - `ThingDef` XML entry with `<thingClass>YourNamespace.YourNewClass</thingClass>`.
    - Thing with New XML Properties:
        - C# class inheriting `ThingDef` for new XML fields.
        - XML `ThingDef` with `Class="YourNamespace.YourThingDef"`.
        - OR: `ThingComp` for existing `ThingWithComps`, define `CompProperties`, XML with `Class="YourNameSpace.MyCompProperties"`.

- **Alter RimWorld Code:**
    - XML (Defs): `PatchOperations` to modify XML Defs (power consumption, plant locations).
    - C# (Methods): `Harmony` for code injection (prefixes, postfixes, transpilers).

**Key Considerations:**
- Mod Sources: Steam Workshop (easiest), Forums, Third-Party (manual).
- Manual Install Location: `RimWorld/Mods/`.
- Activation: In-game Mods menu, restart required.
- Compatibility: Potential conflicts with large mod lists or overlapping mods.
- Mod Types Impact: Cosmetic (visuals), UI (interface), Game Changes (mechanics). 

```````