---
description: global rules
globs: 
alwaysApply: true
---
### Определения
**SWE агент** - это LLM, обычно Gemini с 1 mtok контекстным окном, который может самостоятельно писать код. В данном случае, пользователь декларирует только высокоуровневые требования, а SWE агент самостоятельно пишет код.
**Системный промпт** - у SWE агента есть системный промпт, который определяет его поведение, он может включать в себя общие инструкции, специфические правила кодирования, а также особые знания, которые ему необходимо видеть.

### Примечания

#### Cheat Sheet Style
- Помни, что для LLM не критичен "человеческий фактор", не критична удобная для человека читаемость материала, основной приоритет - информативность.
- Краткий информативный текст в стиле cheat sheet содержит комбинацию сигнатур символов и абстрактных описательных слов (абстрактные описания).
- Сигнатуры символов (классы, методы, свойства и т.д.) являются самодокументируемыми. Вместо того чтобы "объяснять" сигнатуру, лучше ее показать.
- Абстрактные описания должны содержать ту информацию, которую трудно передать сигнатурами, и не должны дублировать самодокументируемость сигнатур.
- Текст, содержащий информацию, ориентированный на LLM, может нести тяжелую когнитивную нагрузку для человека, но это приемлемо для LLM. Цель текста в стиле cheat sheet - передать максимальное количество информации при минимальном количестве текста.
- Пример:
    ```md
    **Resolve Def References**:
        -   **`DefDatabase<ThingCategoryDef>.ResolveAllReferences(onlyExactlyMyType: true, parallel: true)`**: Resolves references for `ThingCategoryDef`.
        -   **`DefDatabase<RecipeDef>.ResolveAllReferences(onlyExactlyMyType: true, parallel: true)`**: Resolves references for `RecipeDef`.
        -   **`foreach (Type item in typeof(Def).AllSubclasses())...`**: For all other `Def` subclasses except `ThingDef`, `ThingCategoryDef`, `RecipeDef`:
            -   **`GenGeneric.InvokeStaticMethodOnGenericType(typeof(DefDatabase<>), item, "ResolveAllReferences", true, false)`**: Invokes the static `ResolveAllReferences` method.
        -   **`DefDatabase<ThingDef>.ResolveAllReferences()`**: Resolves references for `ThingDef`.
    ```
- Итого:
    - Суть cheat sheet - "минимум текста при максимальном сохранении информации, контекста и смысла"
    - Описательный текст не должен дублировать семантику сигнатуры, пример дублирования - "Load language information (`Verse.LanguageDatabase.InitAllMetadata()`)". Для LLM достаточно самодокументируемости сигнатуры.

### Проблема
- У LLM есть общие знания, и хорошие знания C#, но она не очень хорошо знает конкретный фреймворк, в данном случае моддинг игры Rimwordl.
- У LLM есть системный промпт, и в системном промпте должен быть все необходимые знания, который позволит SWE агенту самостоятельно писать код.
- Частью знаний может быть:
    - Core знания, который содеждит всю основную информацию по моддингу Rimworld, которую SWE должен знать для разработки мода независимо от контекста.
    - Различные специфичные знания, которые подключаются к системному промпту в зависимости от типа мода.
- Помимо знаний, SWE агент может также видеть определенный исходный код игры. Поскольку невозможно показать весь исходный код целиком, показывается только релевантные классы.
- Core знания и специфичные знания это часть <cursor_rules_context>, где есть <cursor_rules> Core знаний, и <cursor_rules> отдельных специфичных знаний.
- Исходный код игры, важный для контекста, является <attached_files> в <additional_data>.

### Цель

- На текущем этапе - нужно найти истину: что должно содержаться в Core знаниях, и как подбирать attached_files с исходным кодом игры
- Нужна краткая обобщенная версия ключевых понятий, которая будет включена в core, и расширенная для специфичных знаний
