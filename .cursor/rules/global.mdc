---
description: global rules
globs: 
alwaysApply: true
---
### Определения

**SWE агент** - это LLM, обычно Gemini с 1 mtok контекстным окном, который может самостоятельно писать код. В данном случае, пользователь декларирует только высокоуровневые требования, а SWE агент самостоятельно пишет код.
**Системный промпт** - у SWE агента есть системный промпт, который определяет его поведение, он может включать в себя общие инструкции, специфические правила кодирования, а также особые знания, которые ему необходимо видеть.

### Проблема

- У LLM есть общие знания, и хорошие знания C#, но она не очень хорошо знает конкретный фреймворк, в данном случае моддинг игры Rimwordl.
- У LLM есть системный промпт, и в системном промпте должен быть все необходимые знания, который позволит SWE агенту самостоятельно писать код.
- Частью знаний может быть:
    - Core знания, который содеждит всю основную информацию по моддингу Rimworld, которую SWE должен знать для разработки мода независимо от контекста.
    - Различные специфичные знания, которые подключаются к системному промпту в зависимости от типа мода.
- Помимо знаний, SWE агент может также видеть определенный исходный код игры. Поскольку невозможно показать весь исходный код целиком, показывается только релевантные классы.
- Core знания и специфичные знания это часть <cursor_rules_context>, где есть <cursor_rules> Core знаний, и <cursor_rules> отдельных специфичных знаний.
- Исходный код игры, важный для контекста, является <attached_files> в <additional_data>.

### Цель

- На текущем этапе - нужно найти истину: что должно содержаться в Core знаниях, и как подбирать attached_files с исходным кодом игры
