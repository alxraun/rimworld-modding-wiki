---
description: Rimworld Modding C# Core - Knowledge Base
globs: 
alwaysApply: false
---
## Writing Custom Code

**Purpose:**
- Extend RimWorld functionality beyond XML.
- Create standalone C# classes or Harmony patches.

**Creating a Class:**
- IDE Setup: Use Visual Studio, Rider or other IDEs.
- Project Type: Class Library (.NET Framework 4.8).
- Output Path: `(RimWorldInstallFolder)/Mods/(YourModName)/Assemblies`.
- References: Add `Assembly-CSharp.dll`, `UnityEngine.CoreModule.dll` from `RimWorldWin64_Data\Managed\`.
- `using` Statements: Import namespaces (e.g., `using System;`, `using RimWorld;`, `using Verse;`).
- `namespace`: Organize code, prevent naming conflicts. Use unique namespace (e.g., `YourName.YourModName`).
- Class Definition: `public class MyClassName { ... }`.
- Constructor: `public MyClassName() { ... }` - Initialize class instances.

**Namespaces (Useful):**
- **General:**
    - `System.Collections.Generic`: `List<>`, `Dictionary<>`, `IEnumerable<>`.
    - `System.Linq`: LINQ operations (`.Where()`, etc.).
    - `System.Text.RegularExpressions`: RegEx for string manipulation.
    - `System.Collections`: `IEnumerable` interface.
    - `System.Text`: `StringBuilder` for efficient string building.
- **RimWorld Specific:**
    - `RimWorld`: Core RimWorld classes.
    - `Verse`: Base game classes, general game functionality.
    - `RimWorld.BaseGen`: Settlement generation.
    - `RimWorld.Planet`: World-related classes.
    - `Verse.AI`: Pawn AI, Jobs.
    - `Verse.AI.Group`: Squad AI.
    - `Verse.Grammar`: Text generation, localization.
    - `UnityEngine`: GUI, Rect, Color.
    - `LudeonTK`: Debug actions and utility classes moved from Verse.

**Writing Code Workflow:**
1. **Decompile Source Code:** Examine existing game code for reference.
2. **Compile to DLL:** Use IDE (Build/Compile) to create `.dll` in `Assemblies` folder.
3. **Reference in XML (Optional):** Link C# code to XML Defs using `<thingClass>`, `<compClass>`, etc.
    - Example: `ThingDef` with custom `thingClass` pointing to C# class.
4. **Test in Game:** Run RimWorld; custom classes should load.

**Key Points:**
- Namespaces: Crucial for code organization and preventing conflicts.
- `using` Directives: Simplify code by importing namespaces.
- Constructors: Initialize class instances.
- C# & XML Linking: Bridge between code and content definition.
- Debugging: Use decompiled code for reference; ask for help in modding communities.
- Compilation: Ensure correct .NET Framework and output settings.

## Useful RimWorld Classes for Modders

**Class Categories:**
- **Gen:** (Classes starting with "Gen") - General utility, extension methods for:
    - `GenDate`, `GenLocalDate`: Time-related operations.
    - `GenDraw`: Drawing and graphics.
    - `GenAdj`: Grid and adjacency calculations.
    - `GenText`: Text manipulation (less recommended, use LINQ).
- **Utility:** (Classes ending with "Utility") - Task-specific utilities:
    - `FoodUtility`: Food consumption and handling.
    - `RestUtility`: Rest and sleep management.
    - `PawnUtility`: Pawn-related actions and checks.
    - `MassUtility`: Mass calculations.
    - `Area*`, `Roof*`, `Snow*`: Area, roof, and snow related utilities.
    - `AggressiveAnimalIncidentUtility`: Handles animal attacks (formerly ManhunterPackIncidentUtility).
- **Maker:** (Classes ending with "Maker") - Object creation and management:
    - Create: `Hediffs`, `Things`, `Lords`, `Zones`, `Sites`, `Filth`.
- **Tuning:** (Classes ending in "Tuning") - Game constants:
    - Reference: Game balance and tuning values (not for dynamic value access).
- **Find:** - Game state managers and singletons:
    - `LetterStack`: Letter UI management.
    - `Archive`: Game history and archiving.
    - `StoryWatcher`: Story event tracking.
    - `ResearchManager`: Research system management.
    - `World`: World state access.
    - `FactionManager`: Faction management.
- **PawnsFinder:** - Pawn lookup and filtering.
- **Map:** - Map-level data and managers:
    - Access: `ListerBuildings`, `ListerThings`, `LordManagers`, `ZoneManager`.
    - `MapMeshFlagDef`: Defines mesh flags for map rendering.
    - `MapMeshFlags`: Static properties for accessing mesh flags.
- **Pawn:** - Pawn data and components:
    - Access: `Health`, `Needs`, `Inventory`, `Jobs`, `Story`, `Equipment`.
    - **Pawn Rendering:**
        - `PawnRenderTree`: Node-based rendering system for pawns.
        - `PawnRenderNode`: Represents a node in the render tree.
        - `PawnRenderNodeWorker`: Handles rendering logic for nodes.
        - `PawnRenderNodeProperties`: Data defining how a node renders.
        - `PawnRenderTreeDef`: Defines a race-specific render tree structure.
        - `PawnRenderSubWorker`: Additive workers for mod compatibility.
        - `AnimationDef`: Defines pawn animations.
- **Thing:** - Base game object class.
    - Important methods:
        - `DynamicDrawPhaseAt(phase, drawLoc, flip)`: Entry point for parallel rendering.
        - `DrawAtNow(drawLoc, flip)`: Immediate rendering without parallelism.
- **DefDatabase:** - Def lookup and access:
    - Usage: `DefDatabase<DefType>.GetNamed("defName")`.
- **CellFinder:** - Map cell searching and filtering.
- **Command:** - UI command framework (like Gizmos).
- **Listing_Standard:** - Basic UI layout for settings and lists.
- **Gizmo:** - In-game UI elements (buttons, icons).
- **BoolUnknown:** - Nullable boolean type.
- **LoadedModManager:** - Mod loading and management:
    - Access: `LoadedModManager.RunningModsListForReading` (get loaded mods).
- **Pair<T1, T2>:** - Generic key-value pair (legacy, consider tuples).
- **Rand:** - Random number generation (use with care in multiplayer).
- **LudeonTK:** - Namespace for debug and utility classes (moved from Verse):
    - `DebugActionAttribute` (aka `[DebugAction]`)
    - `DebugActionNode`
    - `DebugActionType`
    - Various debug-related classes.

**Building and Item Classes:**
- `BuildingProperties`: Has `isAttachment` flag for wall-mounted items.
- `IHaulEnroute`: Interface for items that can be hauled by multiple pawns.
- `HiddenItemsManager`: Manages undiscovered items with the `<hiddenWhileUndiscovered>` tag.
- `Building_MultiTileDoor`: Class for ornate doors that span multiple tiles.

**Incident Worker Classes:**
- `IncidentWorker_AggressiveAnimals`: Handles animal attack incidents (formerly ManhunterPack).

**Important Namespace Locations:**
- `IngredientValueGetter`: Located in RimWorld namespace.
- Debug-related classes: Located in LudeonTK namespace.

## C# Modding: Components

**Components:** Add behavior/data to game objects (Things, Buildings, Pawns).
- **Purpose:** Modular functionality, data storage per object instance.
- **Modularity:** Separate functionality, simplify modding.
- **Data:** Store data per object.
- **Types:** `ThingComp`, `MapComponent`, `GameComponent` (object, map, game).
- **XML:** Added via XML defs (`<comps>`).

**When to use Components:**
- Add behavior to Things, Buildings, Pawns.
- Store instance-specific data.
- Create object-based mechanics.
- Need tick/update events.
- Need UI elements (gizmos, inspectors).
- Save/load data with objects.

**Components vs DefModExtension:**
- **ThingComp:** Instance-specific data, behavior, tick events, UI, save/load.
- **DefModExtension:** Global settings per Def, data for non-Thing Defs, lightweight data, avoid Comp overhead.

**Components vs Harmony:**
- **ThingComp:** New functionality to Things, instance data, modularity, compatibility.
- **Harmony:** Modify existing game behavior, patch methods, global changes, game-wide algorithms.

## C# Modding: Harmony Patching

**Harmony Patching:** Modify game code without direct editing.
- **Purpose:** Behavior modification, compatibility.
- **Behavior Modification:** Change method logic, add/modify functionality.
- **Compatibility:** Best for mod compatibility, "on-the-fly" changes.
- **Patch Types:** `Prefix`, `Postfix`, `Transpiler`.
- **No XML:** Applied via C# code.

**When to use Harmony Patching:**
- Modify existing game behavior.
- Fix vanilla/mod bugs.
- Add mod compatibility.
- Fine-tune game balance.
