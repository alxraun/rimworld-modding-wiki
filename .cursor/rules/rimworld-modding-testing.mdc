---
description: "testing" module Rimworld modding documentation
globs: 
alwaysApply: true
---
`\\?\C:\Projects\rimworld\wiki_workspace\wiki\testing\testing-mods-guide.md`:

```````md
## Modding Tutorials/Testing Mods - Cheat Sheet

**Debug Modes:**

- **Development Mode:**
    - Activation: Options Menu -> Gameplay -> Tick "Development mode".
    - Icons (Top-Right):
        - Debug Log: Opens debug log window.
        - Package Editor: Modifies SoundDefs (limited mod use).
        - View Settings: Graphic overlays, cheats (Fast Research).
        - Debug Actions Menu:
            - Incidents: Trigger raids, events.
            - Actions - Misc: Complete research, tutorial.
            - Tools - General: Explosions, snow, plant growth, AI visualizations.
            - Tools - Pawns: Pawn appearance, levels, health, jobs.
            - Tools - Spawning: Spawn pawns, items, terrain, filth.
            - Autotests: Stress tests (colony spawn, burning, pawn killing).
        - Debug Logging Menu: Toggle game logging in Debug Log.
        - Inspector: Detailed info on hovered objects.
        - God Mode: Toggle free building.
        - Pause on Error: Pause game on log errors.

- **Using Debugger:**
    - RimWorld uses Mono runtime.
    - Debugging resources:
        - Step-by-step tutorial: [link to AwsomeInventory Wiki].
        - Source-level debugger (Brrainz): [link to RimWorld4Debugging Github].

**Testing Specific Content (Debug Actions Menu -> Tools - Spawning / Incidents):**

- **Equipment:** Spawn Weapons (Tools - Spawning -> Spawn weapons). Apparel (same menu).
- **Animals:** Spawn Pawns (Tools - Spawning -> Spawn pawns).
- **Raiders:** Start Raid (Debug Actions Menu -> Incidents).
- **Incidents:** Trigger Incident (Debug Actions Menu -> Incidents).
- **Jobs:** Toggle Job Logging (Actions Menu -> Tools - Pawns -> Toggle job logging). Use View settings -> Draw Pawn Debug for visualization.
- **Lords:**
    - View settings -> Draw Duties: See pawn duties.
    - View settings -> Draw Lords: See Lord actions.
    - View settings -> Log Lord Toil Transitions: Log transitions.

**Tips for Testing:**

- **Quickstart:**
    - Command Line Parameter: `-quicktest` for fast map loading.
    - `autostart.rws` Savefile: Auto-loads if present in save folder.

- **Save Data Override:**
    - Command Line Parameter: `-savedatafolder=C:/Path/To/Folder` to redirect save data.
    - Combine with `-quicktest` for clean test environment.

- **Mod Tools:**
    - HugsLib: Quickstart, hotkey restart.
    - Publisher Plus (Jaxe): File exclusion for uploads.
    - TDBug (AlexTD/Uuugggg): Debugging tools.
    - 4M Mehni's Misc Modifications (Mehni): Various utilities.
    - Create custom tools for specific needs.

```````

`\\?\C:\Projects\rimworld\wiki_workspace\wiki\testing\troubleshooting-finding-exceptions.md`:

```````md
## Troubleshooting - Finding Exceptions Cheat Sheet

**For Modders Facing Exceptions (NRE Example):**

**Purpose:** Track down the root cause of exceptions, especially NullReferenceExceptions (NREs).

**Requirements:**

- An Exception (error message/stack trace).
- Decompiler (ILSpy, dnSpy, Rider/dotPeek).

**Example Scenario:**

- Debug Action "Spawn Potatoes" added for demonstration.
- Code spawns potatoes at a pawn's location.
- Goal: Understand how to use decompilers to investigate exceptions.

**Troubleshooting Steps (General Approach):**

1. **Get the Exception:**
   - Obtain the full error message and stack trace from RimWorld's debug log.

2. **Use a Decompiler:**
   - Open `Assembly-CSharp.dll` in a decompiler (ILSpy, dnSpy, Rider/dotPeek).

3. **Analyze the Stack Trace (Example):**
   - Read stack trace from top to bottom.
   - Start analysis ~3 calls before the top for relevant mod code.
   - Identify Exception Type: `System.NullReferenceException` (common for modding).
   - Look for Harmony Patches: `(wrapper dynamic-method) ... _Patch#` indicates Harmony involvement.
   - Locate Error Source: `Namespace.Class.MethodName` (e.g., `Gloomylynx.TantrumPatch.CheckForDisturbedSleepPrefix`).

4. **Understand NullReferenceException (NRE):**
   - "Object reference not set to an instance of an object" - code tries to use a variable that is `null` (not initialized).

5. **Decompile Error Source Code:**
   - Use decompiler to examine the code in the identified `Namespace.Class.MethodName`.
   - Look for lines of code where a variable might be `null` before being used (dereferenced).

6. **Debugging Example (Conceptual):**
   - Imagine `SpawnPotatoesOnPawn(Pawn pawn)` throws NRE.
   - Decompile `SpawnPotatoesOnPawn` method.
   - Check for potential `null` variables: `pawn`, `pawn.Position`, `pawn.Map`, etc.
   - Add null checks (`if (pawn != null)`) to your code to prevent NRE.

**Key Takeaways:**

- Stack traces are read top-down, error at the top.
- NullReferenceExceptions (NREs) are common due to uninitialized variables.
- Decompilers are essential for examining game code and pinpointing error sources.
- Focus on the relevant part of the stack trace (your mod's namespace).
- Use null checks defensively in your code.

```````

`\\?\C:\Projects\rimworld\wiki_workspace\wiki\testing\troubleshooting-guide.md`:

```````md
## Modding Troubleshooting - Cheat Sheet

**Common XML Errors:**

- **Syntax Errors:**
    - Formatting, unclosed tags, wrong case, whitespace.
    - Use XML editor with validation.
    - Example: `compClass` vs `CompClass`, missing closing tag `</tag>`.
- **Cross-reference Errors:**
    - Def B not found when Def A references it by `defName`.
    - Type and `defName` must match.
    - Error message: "Could not resolve cross-reference: No DefType named DefName".
    - List errors: "Could not resolve cross-reference to DefType named DefName (wanter=tagName)".
- **Duplicate Field/Tag Definitions:**
    - Same field defined twice in a Def (mod conflict).
    - First mod's definition takes precedence.
    - Error message: "XML Def defines the same field twice: fieldName".
- **Missing Type:**
    - XML refers to a C# type not loaded (missing DLL, load error, outdated mod).
    - Error message: "Could not find type named Namespace.ClassName".
- **Referencing Non-Existing Field:**
    - XML tag doesn't exist in the Def's C# class (typo, wrong node, outdated mod).
    - Error message: "XML error: <tagName> doesn't correspond to any field in type DefType".

**Solving XML Errors:**

- Errors Cascade: Fix errors sequentially, starting with the first.
- XML Validation: Use a validating XML editor.
- Check Player.log: For detailed error messages.

**Reading Stacktraces (Example: NullReferenceException):**

- Read Top-Down: Error at the top, call sequence below.
- "Exception in BreadthFirstTraverse": Error catch point.
- "System.NullReferenceException: Object reference...": Type of error - uninitialized object.
- "*wrapper dynamic-method* Verse.Pawn.CheckForDisturbedSleep_Patch1": Harmony patch involved.
- "Gloomylynx.TantrumPatch.CheckForDisturbedSleepPrefix": Namespace.Class.Method causing error.

**Bug Reporting:**

- Provide detailed bug reports to mod authors.
- Include logs (especially HugsLib logs).
- Describe steps to reproduce the error.
- Be polite; modders are volunteers.
- "x breaks" is not helpful; provide specific details.

**Finding Error Cause in Stacktrace:**

- Start reading from the top of the stacktrace.
- Identify the Exception Type (e.g., NullReferenceException).
- Look for mod namespace, class, and method names in the stacktrace.
- Trace back the method calls to understand the error context.
- Use decompilers to examine the code at fault.

```````
